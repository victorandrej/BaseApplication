CREATE TABLE IF NOT EXISTS  USUARIO(
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  NOME VARCHAR NOT NULL,
  DESCRICAO VARCHAR NOT NULL,
  SENHA VARCHAR NOT NULL,
  EXPIRACAO INTEGER,
  ATIVO BOOLEAN
);;

GRANT ALL PRIVILEGES ON TABLE USUARIO TO SERRANO;;

GRANT USAGE,
SELECT
  ON ALL SEQUENCES IN SCHEMA public to SERRANO;;


CREATE OR REPLACE FUNCTION before_insert_usuario_or_update()
  RETURNS trigger
  LANGUAGE plpgsql AS
$$
BEGIN
   IF EXISTS (SELECT FROM USUARIO u
              WHERE LOWER(u.nome) = LOWER(new.nome)) THEN
      RETURN NULL;
   END IF;

   RETURN NEW;
END
$$;

CREATE OR REPLACE TRIGGER before_insert_usuario_or_update
BEFORE INSERT OR UPDATE OF NOME
ON USUARIO
FOR EACH ROW EXECUTE PROCEDURE before_insert_usuario_or_update();;



insert into
  USUARIO("nome", "descricao", "senha","ativo")
values
  ('admin', 'Admin', 'admin',true);;

CREATE TABLE IF NOT EXISTS  GRUPO_USUARIO(
  ID BIGSERIAL NOT NULL PRIMARY KEY,
  NOME VARCHAR NOT NULL,
  DESCRICAO VARCHAR NOT NULL
);;


 GRANT ALL PRIVILEGES ON TABLE GRUPO_USUARIO TO SERRANO;;


GRANT USAGE,
SELECT
  ON ALL SEQUENCES IN SCHEMA public to SERRANO;;


CREATE OR REPLACE FUNCTION before_insert_grupo_usuario_or_update()
  RETURNS trigger
  LANGUAGE plpgsql AS
$$
BEGIN
   IF EXISTS (SELECT FROM GRUPO_USUARIO g
              WHERE LOWER(g.nome) = LOWER(new.nome)) THEN
      RETURN NULL;
   END IF;

   RETURN NEW;
END
$$;

CREATE OR REPLACE TRIGGER before_insert_grupo_usuario_or_update
BEFORE INSERT OR UPDATE OF NOME
ON GRUPO_USUARIO
FOR EACH ROW EXECUTE PROCEDURE before_insert_grupo_usuario_or_update();;


INSERT INTO
  GRUPO_USUARIO(NOME, DESCRICAO)
VALUES
  ('administrador', 'Administrador');;

CREATE TABLE IF NOT EXISTS  USUARIO_GRUPO_USUARIO(
  ID BIGSERIAL NOT NULL PRIMARY KEY,
  ID_USUARIO BIGINT NOT NULL,
  ID_GRUPO_USUARIO BIGINT NOT NULL,
  CONSTRAINT ID_USUARIO_USUARIO_GRUPO_USUARIO_FK FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO(ID) ,
  CONSTRAINT ID_GRUPO_USUARIO_USUARIO_GRUPO_USUARIO_FK FOREIGN KEY(ID_GRUPO_USUARIO) REFERENCES GRUPO_USUARIO(ID)
);;

  GRANT ALL PRIVILEGES ON TABLE USUARIO_GRUPO_USUARIO TO SERRANO;;

  GRANT USAGE,
SELECT
  ON ALL SEQUENCES IN SCHEMA public to SERRANO;;

  CREATE OR REPLACE FUNCTION before_insert_usuario_grupo_usuario_or_update()
  RETURNS trigger
  LANGUAGE plpgsql AS
$$
BEGIN
   IF EXISTS (SELECT FROM USUARIO_GRUPO_USUARIO ugu
              WHERE ugu.id_usuario = new.id_usuario and ugu.id_grupo_usuario = new.id_grupo_usuario)  THEN
      RETURN NULL;
   END IF;

   RETURN NEW;
END
$$;

CREATE OR REPLACE TRIGGER before_insert_usuario_grupo_usuario_or_update
BEFORE INSERT OR UPDATE OF ID_USUARIO, ID_GRUPO_USUARIO
ON USUARIO_GRUPO_USUARIO
FOR EACH ROW EXECUTE PROCEDURE before_insert_usuario_grupo_usuario_or_update();;

INSERT INTO
  USUARIO_GRUPO_USUARIO(ID_USUARIO, ID_GRUPO_USUARIO)
VALUES
  (
    (
      SELECT
        ID
      FROM
        USUARIO U
      WHERE
        U.NOME = 'admin'
    ),
    (
      SELECT
        ID
      FROM
        GRUPO_USUARIO G
      WHERE
        G.NOME = 'administrador'
    )
  );;


CREATE TABLE IF NOT EXISTS  NOTIFICACAO(
  ID BIGSERIAL primary key NOT NULL,
  VISTO BOOLEAN NOT NULL,
  TITULO VARCHAR NOT NULL,
  NOTIFICACAO VARCHAR NOT NULL,
  IS_LINK BOOLEAN NOT NULL,
  MODULO VARCHAR,
  VIEW VARCHAR,
  TIPO VARCHAR NOT NULL,
  ID_USUARIO BIGINT NOT NULL,
  DATA DATE
);;

GRANT ALL PRIVILEGES ON TABLE NOTIFICACAO TO SERRANO;;

CREATE TABLE IF NOT EXISTS  NOTIFICACAO_PARAMETRO(
  ID BIGSERIAL primary key NOT NULL,
  ID_NOTIFICACAO BIGINT NOT NULL,
  NOME_PARAMETRO VARCHAR NOT NULL,
  CLASSE VARCHAR,
  VALOR VARCHAR
);;

GRANT ALL PRIVILEGES ON TABLE NOTIFICACAO_PARAMETRO TO SERRANO;;

CREATE TABLE IF NOT EXISTS  PARAMETROS(
  ID BIGSERIAL PRIMARY KEY NOT NULL,
  NOME VARCHAR NOT NULL,
  DESCRICAO VARCHAR NOT NULL,
  VALUE VARCHAR NOT NULL,
  TIPO VARCHAR NOT NULL
);;


  CREATE OR REPLACE FUNCTION before_insert_parametros_or_update()
  RETURNS trigger
  LANGUAGE plpgsql AS
$$
BEGIN
   IF EXISTS (SELECT FROM PARAMETROS p
              WHERE LOWER(p.nome) = LOWER(new.nome))  THEN
      RETURN NULL;
   END IF;

   RETURN NEW;
END
$$;

CREATE OR REPLACE TRIGGER before_insert_parametros_or_update
BEFORE INSERT OR UPDATE OF NOME
ON PARAMETROS
FOR EACH ROW EXECUTE PROCEDURE before_insert_parametros_or_update();;


GRANT ALL PRIVILEGES ON TABLE PARAMETROS TO SERRANO;;

CREATE TABLE IF NOT EXISTS  PARAMETROS_OPTION(
  ID BIGSERIAL NOT NULL PRIMARY KEY,
  VALUE VARCHAR NOT NULL,
  DESCRICAO VARCHAR NOT NULL,
  ID_PARAMETROS INTEGER NOT NULL
);;

GRANT ALL PRIVILEGES ON TABLE PARAMETROS_OPTION TO SERRANO;;




CREATE TABLE IF NOT EXISTS  PERMISSAO (
  ID BIGSERIAL PRIMARY KEY,
  NOME VARCHAR,
  DESCRICAO VARCHAR
);;


GRANT ALL PRIVILEGES ON TABLE PERMISSAO TO SERRANO;;


  CREATE OR REPLACE FUNCTION before_insert_permissao_or_update()
  RETURNS trigger
  LANGUAGE plpgsql AS
$$
BEGIN
   IF EXISTS (SELECT FROM PERMISSAO p
              WHERE LOWER(p.nome) = LOWER(new.nome))  THEN
      RETURN NULL;
   END IF;

   RETURN NEW;
END
$$;

CREATE OR REPLACE TRIGGER before_insert_permissao_or_update
BEFORE INSERT OR UPDATE OF NOME
ON PERMISSAO
FOR EACH ROW EXECUTE PROCEDURE before_insert_permissao_or_update();;



CREATE TABLE IF NOT EXISTS  USUARIO_PERMISSAO (
  ID BIGSERIAL PRIMARY KEY,
  ID_USUARIO BIGINT,
  ID_PERMISSAO BIGINT,
  CONSTRAINT ID_PERMISSAO_USUARIO_PERMISSAO_FK FOREIGN KEY(ID_PERMISSAO) REFERENCES PERMISSAO(ID) ON DELETE CASCADE
);;

GRANT ALL PRIVILEGES ON TABLE USUARIO_PERMISSAO TO SERRANO;;

CREATE
OR REPLACE FUNCTION INSERT_PERMISSAO_ADMIN() RETURNS trigger AS $$ begin
insert into
  USUARIO_PERMISSAO (id_usuario, id_permissao)
values
  (
    (
      SELECT
        ID
      FROM
        USUARIO U
      WHERE
        U.NOME = 'admin'
    ),
    NEW.ID
  );

return NEW;

end;

$$ LANGUAGE plpgsql;;

CREATE OR REPLACE TRIGGER INSERT_PERMISSAO_ADMIN
AFTER
INSERT
  ON PERMISSAO FOR EACH ROW EXECUTE PROCEDURE INSERT_PERMISSAO_ADMIN();;


    GRANT USAGE,
SELECT
  ON ALL SEQUENCES IN SCHEMA public to SERRANO;;




INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('configuracao','Exibir Configuração');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('configuracao.parametrizacao','Exibir Parametrização');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('cadastro','Exibir Cadastro');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('cadastro.grupoUsuario','Exibir Grupo de usuarios');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('cadastro.grupoUsuario.incluir','Incluir');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('cadastro.grupoUsuario.deletar','Deletar');;
INSERT INTO PERMISSAO(NOME,DESCRICAO) VALUES('cadastro.grupoUsuario.editar','Editar');;

INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('sistema','Sistema','','PASTA');;
INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('sistema.info','Informações','','PASTA');;
INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('sistema.info.db','Banco de dados','','PASTA');;
INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('sistema.info.db.versao-script','Versão Script','','READONLY');;

INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('dispositivo','Dispositivo','','PASTA');;
INSERT INTO PARAMETROS(NOME,DESCRICAO,VALUE,TIPO) VALUES('dispositivo.entrada','Entrada','','PASTA');;
